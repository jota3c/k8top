#!/bin/env python3
import curses
import shlex, subprocess
import re
import io
from numpy import true_divide
import pandas as pd
from datetime import datetime
from time import sleep

#
SECONDS=5

# COMMANDOS
# TERMINAR TODOS COM SPACE

# AJUSTAR CONFORME A INFRA
MAINCMD="kubectl "

NODES="get nodes "
VERSION=" version --short  "
PODS="get pods -A "

# NAO ALTERAR
SPACETOCSV="| tr -s '[:blank:]' ';' "
NODESCMD=shlex.split(MAINCMD+NODES)
VERSIONCMD=shlex.split(MAINCMD+VERSION)
PODSCMD=shlex.split(MAINCMD+PODS)

class Pods:
    def __init__(self,width,rows=5):
        result = subprocess.run(PODSCMD, stdout=subprocess.PIPE,stderr=subprocess.DEVNULL)
        filtered_result = re.sub(r'\([^)]*\)', '',result.stdout.decode('utf-8'))
        csv_result = re.sub( r"[^\S\n\t]+", ";", filtered_result )        
        pd.set_option('display.max_rows', rows)
        pd.set_option('display.max_columns', None)
        pd.set_option('display.width', width)
        pd.set_option('display.max_colwidth', None)
        pd.set_option('display.colheader_justify', 'right')
        self.df = pd.read_csv(io.StringIO(csv_result), delimiter=';')

    def get(self):
        return self.df

    def restarts(self):
        filter=self.df.query("RESTARTS != 0")
        return filter.sort_values(by=['RESTARTS'], ascending=False)


    def failed(self):
        return self.df.query("STATUS != 'Running' and STATUS != 'Completed' and STATUS != 'Terminated'")

    def countfailed(self):
        return str(len(self.df.query("STATUS != 'Running' and STATUS != 'Completed' and STATUS != 'Terminated'").index))

    def count(self):
        #df_filter=self.df['STATUS'].value_counts()
        df_sum=int(self.countrun())+int(self.countfailed())
        return str(df_sum)

    def countrun(self):        
        dftmp=self.df['STATUS'].value_counts()
        return str(dftmp['Running'])
        

class Version:
    def __init__(self):
        result = subprocess.run(VERSIONCMD, stdout=subprocess.PIPE,stderr=subprocess.DEVNULL)
        csv_result = re.sub( r"[^\S\n\t]+", ";", result.stdout.decode('utf-8') )
        pd.set_option('display.max_rows', None)
        pd.set_option('display.max_columns', None)
        pd.set_option('display.width', None)
        pd.set_option('display.max_colwidth', None)
        pd.set_option('display.colheader_justify', 'right')
        self.df = pd.read_csv(io.StringIO(csv_result), delimiter=';', names=["object", "trash", "version"])

    def client(self):
        return str(self.df[self.df.object=='Client'].version.item())

    def server(self):
        return str(self.df[self.df.object=='Server'].version.item())

    def match(self):
        if self.df[self.df.object=='Client'].version.item() == self.df[self.df.object=='Server'].version.item():
            return True
        else:
            return False
        

class Nodes:
    def __init__(self,width,rows=5):
        result = subprocess.run(NODESCMD, stdout=subprocess.PIPE,stderr=subprocess.DEVNULL)
        csv_result = re.sub( r"[^\S\n\t]+", ";", result.stdout.decode('utf-8') )
        pd.set_option('display.max_rows', rows)
        pd.set_option('display.max_columns', None)
        pd.set_option('display.width', width)
        pd.set_option('display.max_colwidth', width)
        pd.set_option('display.colheader_justify', 'right')
        self.df = pd.read_csv(io.StringIO(csv_result), delimiter=';')

    def count(self):
        return str(len(self.df.index))

    def get(self):
        return self.df

    def countread2(self):
        self.df.groupby("STATUS").sum() 
        return str(len(self.df.groupby("STATUS").sum().index))
    
    def countready(self):
        dftmp=self.df['STATUS'].value_counts()
        return str(dftmp['Ready'])
        

class TopWin:
    def __init__(self):
        pass

    def winsize(self,df_index):
        size=len(df_index)+4
        if size > 9:
            return 9
        else:
            return size

    def draw(self,df,title,width,start):
        # curses.newwin(height, width, begin_y, begin_x)
        if not df.empty:
            color=3
            win=curses.newwin(self.winsize(df.index),width,start,0)
            win.clear()
            win.border(0)
            win.attron(curses.color_pair(color))
            win.attron(curses.A_BOLD)
            win.addstr(0, 5, " {} ".format(title))
            win.attroff(curses.color_pair(color))
            win.attroff(curses.A_BOLD)
            lincount=1
            for line in df.to_string(index=False).split('\n'):
                win.addstr(lincount, 5, line)
                if lincount >= 6: 
                    win.addstr(lincount+1, 5, "...")
                    break
                lincount+=1           
            win.refresh()
            return lincount+2
        return 0            

    
def draw_menu(stdscr):
    k = 0
    cursor_x = 0
    cursor_y = 0

    # Clear and refresh the screen for a blank canvas
    stdscr.clear()
    stdscr.refresh()

    # Start colors in curses
    curses.start_color()
    curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_WHITE)

    # Loop until "quit"
    while (k != ord('q')):


        # Initialization
        stdscr.clear()
        height, width = stdscr.getmaxyx()
        nodes = Nodes(width-4)        
        ver = Version()      
        pods=Pods(width-4)  

        if k == curses.KEY_DOWN:
            cursor_y = cursor_y + 1
        elif k == curses.KEY_UP:
            cursor_y = cursor_y - 1
        elif k == curses.KEY_RIGHT:
            cursor_x = cursor_x + 1
        elif k == curses.KEY_LEFT:
            cursor_x = cursor_x - 1

        cursor_x = max(0, cursor_x)
        cursor_x = min(width-1, cursor_x)

        cursor_y = max(0, cursor_y)
        cursor_y = min(height-1, cursor_y)

        # Desabilitando cursor
        curses.curs_set(0)

        # Nao esperar tecla ser pressionada
        stdscr.nodelay(True)

        # Hora para barra status
        hora = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        #statusbarstr = "Press 'q' or Ctrl+C to exit | {} | Pos: {}, {}".format(hora, cursor_x, cursor_y)
        statusbarstr = "Press 'q' or Ctrl+C to exit | {} | Refresh every : {}s".format(hora, SECONDS)


        # exemplos para centralizar
        #start_x_title = int((width // 2) - (len(title) // 2) - len(title) % 2)
        #start_x_subtitle = int((width // 2) - (len(subtitle) // 2) - len(subtitle) % 2)
        #start_x_keystr = int((width // 2) - (len(keystr) // 2) - len(keystr) % 2)
        #start_y = int((height // 2) - 2)

        # Header
        stdscr.addstr(0, 0, "= K8Top =", curses.color_pair(1))

        # Status 
        stdscr.attron(curses.color_pair(3))
        stdscr.addstr(height-1, 0, statusbarstr)
        stdscr.addstr(height-1, len(statusbarstr), " " * (width - len(statusbarstr) - 1))
        stdscr.attroff(curses.color_pair(3))
        stdscr.attron(curses.color_pair(11))
        stdscr.attron(curses.A_BOLD)

        k = stdscr.getch()
    
        nodestxt="Nodes : "+nodes.countready()
        vertxt="Versions (cli/srv) : "+ver.client()+"/"+ver.server()
        podstxt="Pods Running: "+pods.countrun()+"/"+pods.count()

        #stdscr.addstr(1, 0, "Nodes : "+nodes.countready()+"/"+nodes.count()+" | Cluster : "+ver.server()+" | Client: "+ver.client())
        stdscr.addstr(1, 0, nodestxt+" | "+podstxt+" | "+vertxt)
        stdscr.hline(2,0,"_",width)

        k = stdscr.getch()

        # Turning off attr title
        stdscr.attroff(curses.color_pair(2))
        stdscr.attroff(curses.A_BOLD)

        last=3

        # Failed Pods
        last=last+TopWin().draw(pods.failed(),"Failed Pods",width-1,last)

        # Restarting Pods
        last=last+TopWin().draw(pods.restarts(),"Restarted Pods",width-1,last)        

        # Nodes
        last=last+TopWin().draw(nodes.get(),"Nodes",width-1,last+1)


        # Refresh
        stdscr.refresh()

        # Wait key
        count=0
        while count <= SECONDS and k != ord('q'):
            k = stdscr.getch()
            sleep(0.5)
            k = stdscr.getch()
            sleep(0.5)                
            count+=1

def main():
    # pods=Pods(None,4)
    # print(pods.failed())
    # exit()
    # print(ver.match())
    try:
        curses.wrapper(draw_menu)
    except KeyboardInterrupt:
        return 

if __name__ == "__main__":
    main()
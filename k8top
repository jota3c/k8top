#!/bin/env python3
#
###########################################################################
# K8Top - "top" like for K8S and OCP Clusters
###########################################################################
#
# Copyright 2022 - Juliano Costa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import curses
import operator
import shlex, subprocess
import re
import io
import pandas as pd
from datetime import datetime
from time import sleep

#
SECONDS=5

#### CMDS ###########################
# = Obs.: use white space on the end
#####################################
# Kubernetes
MAINCMD="kubectl "
# Openshift
#MAINCMD="oc "

# Get Objects
NODES="get nodes "
VERSION="version --short  "
PODS="get pods -A "
PVCS="get pvc -A "
OPERATORS="get co "

# ATTENTION: Caution to change
#SPACETOCSV="| tr -s '[:blank:]' ';' "
NODESCMD=shlex.split(MAINCMD+NODES)
VERSIONCMD=shlex.split(MAINCMD+VERSION)
PODSCMD=shlex.split(MAINCMD+PODS)
PVCSCMD=shlex.split(MAINCMD+PVCS)
OPERATORSCMD=shlex.split(MAINCMD+OPERATORS)

### Enf of CMDS ######################


class CSV:
    def __init__(self):
        pass

    def getcsv(CMD):
        result = subprocess.run(CMD, stdout=subprocess.PIPE,stderr=subprocess.DEVNULL)
        filtered_result = re.sub(r'\([^)]*\)', '',result.stdout.decode('utf-8'))
        csv_result = re.sub( r"[^\S\n\t]+", ";", filtered_result )        
        return io.StringIO(csv_result)

class Po:
    def __init__(self,width=0,rows=5):
        pd.set_option('display.max_rows', rows)
        pd.set_option('display.max_columns', None)
        pd.set_option('display.width', width)
        pd.set_option('display.max_colwidth', None)
        pd.set_option('display.colheader_justify', 'right')        

class Pods(Po):
    def __init__(self,width=0,rows=5):
        super().__init__(width=0,rows=5)
        try:
            self.validate = True
            self.df = pd.read_csv(CSV.getcsv(PODSCMD), delimiter=';')
        except:
            self.validate = False

    def get(self):
        return self.df

    def restarts(self):
        filter=self.df.query("RESTARTS != 0")
        return filter.sort_values(by=['RESTARTS'], ascending=False)


    def failed(self):
        return self.df.query("STATUS != 'Running' and STATUS != 'Completed' and STATUS != 'Terminated'")

    def countfailed(self):
        return str(len(self.df.query("STATUS != 'Running' and STATUS != 'Completed' and STATUS != 'Terminated'").index))

    def count(self):
        df_sum=int(self.countrun())+int(self.countfailed())
        return str(df_sum)

    def countrun(self):        
        dftmp=self.df['STATUS'].value_counts()
        return str(dftmp['Running'])


class Pvcs(Po):
    def __init__(self,width=0,rows=5):
        super().__init__(width=0,rows=5)
        try:
            self.validate = True            
            self.df = pd.read_csv(CSV.getcsv(PVCSCMD), delimiter=';')    
        except:
            self.validate = False            
            self.df = None            

    def count(self):
        return str(len(self.df.index))        

    def countbound(self):
        dftmp=self.df['STATUS'].value_counts()
        return str(dftmp['Bound'])

class Operators(Po):
    def __init__(self,width=0,rows=5):
        super().__init__(width=0,rows=5)
        try:
            self.validate = True            
            self.df = pd.read_csv(CSV.getcsv(OPERATORSCMD), delimiter=';')  
        except:
            self.validate = False            
            self.df = None            
        #AVAILABLE   PROGRESSING   DEGRADED
        #   True        False         False

    def notok(self):
        return self.df.query("AVAILABLE != 'True' or PROGRESSING != 'False' or DEGRADED != 'False'")        



class Version(Po):
    def __init__(self,width=0,rows=5):
        super().__init__(width=0,rows=5)
        try:
            self.validate = True            
            self.df = pd.read_csv(CSV.getcsv(VERSIONCMD), delimiter=';', names=["object", "trash", "version"])   
        except:
            self.validate = False            
            self.df = None            

    def client(self):
        return str(self.df[self.df.object=='Client'].version.item())

    def server(self):
        return str(self.df[self.df.object=='Server'].version.item())

    def match(self):
        if self.df[self.df.object=='Client'].version.item() == self.df[self.df.object=='Server'].version.item():
            return True
        else:
            return False
        
class Nodes(Po):
    def __init__(self,width=0,rows=5):
        super().__init__(width=0,rows=5)
        try:
            self.validate = True            
            self.df = pd.read_csv(CSV.getcsv(NODESCMD), delimiter=';')  
        except:
            self.validate = False            
            self.df = None

    def count(self):
        return str(len(self.df.index))

    def get(self):
        return self.df

    def countread2(self):
        self.df.groupby("STATUS").sum() 
        return str(len(self.df.groupby("STATUS").sum().index))
    
    def countready(self):
        dftmp=self.df['STATUS'].value_counts()
        return str(dftmp['Ready'])
        

class TopWin:
    def __init__(self):
        pass

    def winsize(self,df_index):
        size=len(df_index)+4
        if size > 9:
            return 9
        else:
            return size

    def draw(self,df,title,width,start):
        # curses.newwin(height, width, begin_y, begin_x)
        if not df.empty:
            color=3
            win=curses.newwin(self.winsize(df.index),width,start,0)
            win.clear()
            win.border(0)
            win.attron(curses.color_pair(color))
            win.attron(curses.A_BOLD)
            win.addstr(0, 5, " {} ".format(title))
            win.attroff(curses.color_pair(color))
            win.attroff(curses.A_BOLD)
            lincount=1
            for line in df.to_string(index=False).split('\n'):
                win.addstr(lincount, 5, line)
                if lincount >= 6: 
                    win.addstr(lincount+1, 5, "...")
                    break
                lincount+=1           
            win.refresh()
            return lincount+2
        return 0            

class StatusBar():
    def __init__(self):
        pass

    def draw(self,stdscr,title,width,height):
        statusbarstr = title       
        stdscr.attron(curses.color_pair(3))
        stdscr.addstr(height-1, 0, statusbarstr)
        stdscr.addstr(height-1, len(statusbarstr), " " * (width - len(statusbarstr) - 1))
        stdscr.attroff(curses.color_pair(3))
        stdscr.refresh()        
    
def draw_menu(stdscr):
    k = 0
    cursor_x = 0
    cursor_y = 0

    # Clear and refresh the screen for a blank canvas
    stdscr.clear()
    stdscr.refresh()

    # Start colors in curses
    curses.start_color()
    curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_WHITE)

    # Loop until "quit"
    while (k != ord('q')):


        # Initialization
        #stdscr.erase()
        height, width = stdscr.getmaxyx()


        # Desabilitando cursor
        curses.curs_set(0)

        # Nao esperar tecla ser pressionada
        stdscr.nodelay(True)
        stdscr.clear()

         # exemplos para centralizar
        #start_x_title = int((width // 2) - (len(title) // 2) - len(title) % 2)
        #start_x_subtitle = int((width // 2) - (len(subtitle) // 2) - len(subtitle) % 2)
        #start_x_keystr = int((width // 2) - (len(keystr) // 2) - len(keystr) % 2)
        #start_y = int((height // 2) - 2)

        # Header
        stdscr.addstr(0, 0, "= K8Top =", curses.color_pair(1))

        # Status Bar (With Getting Data)
        #statusbarstr = "Press 'q' or Ctrl+C to exit | {} | Pos: {}, {}".format(hora, cursor_x, cursor_y)        
        statusbar=StatusBar()
        hora = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
    
        statusbar.draw(stdscr,"Press 'q' or Ctrl+C to exit | {} | Refresh every : {}s  ==== GETTING DATA ====".format(hora, SECONDS),width,height)

        # Getting Data
        nodes = Nodes(width-4)        
        ver = Version()      
        pods=Pods(width-4)  
        pvcs=Pvcs(width-4)      
        operators=Operators(width-4)

        statusbar.draw(stdscr,"Press 'q' or Ctrl+C to exit | {} | Refresh every : {}s".format(hora, SECONDS) ,width,height)        

        stdscr.attron(curses.color_pair(11))
        stdscr.attron(curses.A_BOLD)


        # END OF INITIALIZATION

        k = stdscr.getch()
    
        nodestxt="Nodes Ready: {}/{}".format(nodes.countready(),nodes.count())
        vertxt="Versions (cli/srv): {}/{}".format(ver.client(),ver.server())
        podstxt="Pods Running: {}/{} ".format(pods.countrun(),pods.count())
        pvcstxt="PVC Bound: {}/{}".format(pvcs.countbound(),pvcs.count())

        stdscr.addstr(1, 0, "{} | {} | {} | {}".format(nodestxt,podstxt,pvcstxt,vertxt))
        stdscr.hline(2,0,"_",width)

        k = stdscr.getch()

        # Turning off attr title
        stdscr.attroff(curses.color_pair(2))
        stdscr.attroff(curses.A_BOLD)

        last=3

        # Operators
        if operators.validate == True:
            last=last+TopWin().draw(operators.notok(),"Operators NotOK",width-1,last)        

        # Failed Pods
        if pods.validate == True:
            last=last+TopWin().draw(pods.failed(),"Failed Pods",width-1,last)
            last=last+TopWin().draw(pods.restarts(),"Restarted Pods",width-1,last)        

        # Nodes
        if nodes.validate == True:
            last=last+TopWin().draw(nodes.get(),"Nodes",width-1,last+1)


        # Refresh
        stdscr.refresh()

        # Wait key
        count=0
        while count <= SECONDS and k != ord('q'):
            k = stdscr.getch()
            sleep(0.5)
            k = stdscr.getch()
            sleep(0.5)                
            count+=1

def main():
    # pods=Pods(None,4)
    # print(pods.failed())
    # exit()
    # print(ver.match())
    try:
        curses.wrapper(draw_menu)
    except KeyboardInterrupt:
        return 

if __name__ == "__main__":
    main()